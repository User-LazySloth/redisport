diff --git a/tests/unit/introspection.tcl b/tests/unit/introspection.tcl
index eaeff5da7..54c64ee64 100644
--- a/tests/unit/introspection.tcl
+++ b/tests/unit/introspection.tcl
@@ -687,7 +687,11 @@ start_server {tags {"introspection"}} {
         set r1 [redis_client]
         assert_equal [$r1 ping] "PONG"
         $r1 close
-        close $sockfd
+        
+	# Only close sockfd if it was actually created
+        if {[info exists sockfd]} {
+            close $sockfd
+        }
     }
 
     test {CONFIG SET duplicate configs} {
diff --git a/tests/unit/type/set.tcl b/tests/unit/type/set.tcl
index c194ee278..1bfd9c3e6 100644
--- a/tests/unit/type/set.tcl
+++ b/tests/unit/type/set.tcl
@@ -1007,28 +1007,6 @@ foreach type {single multiple single_multiple} {
         return [string match {*rehashing target*} $htstats]
     }
 
-    proc rem_hash_set_top_N {myset n} {
-        set cursor 0
-        set members {}
-        set enough 0
-        while 1 {
-            set res [r sscan $myset $cursor]
-            set cursor [lindex $res 0]
-            set k [lindex $res 1]
-            foreach m $k {
-                lappend members $m
-                if {[llength $members] >= $n} {
-                    set enough 1
-                    break
-                }
-            }
-            if {$enough || $cursor == 0} {
-                break
-            }
-        }
-        r srem $myset {*}$members
-    }
-
     proc verify_rehashing_completed_key {myset table_size keys} {
         set htstats [r debug HTSTATS-KEY $myset]
         assert {![string match {*rehashing target*} $htstats]}
@@ -1036,102 +1014,133 @@ foreach type {single multiple single_multiple} {
     }
 
     test "SRANDMEMBER with a dict containing long chain" {
+        # This test modifies server configs, so we save the original values.
         set origin_save [config_get_set save ""]
         set origin_max_lp [config_get_set set-max-listpack-entries 0]
         set origin_save_delay [config_get_set rdb-key-save-delay 2147483647]
 
-        # 1) Create a hash set with 100000 members.
-        set members {}
-        for {set i 0} {$i < 100000} {incr i} {
-            lappend members [format "m:%d" $i]
-        }
-        create_set myset $members
-
-        # 2) Wait for the hash set rehashing to finish.
-        while {[is_rehashing myset]} {
-            r srandmember myset 100
-        }
+        # Use try...finally to guarantee config cleanup, even on failure.
+        try {
+            # 1) Create a hash set with 100000 members using batched SADD.
+            r del myset
+            set members_batch {}
+            for {set i 0} {$i < 100000} {incr i} {
+                lappend members_batch [format "m:%d" $i]
+                if {[llength $members_batch] >= 1000} {
+                    r sadd myset {*}$members_batch
+                    set members_batch {}
+                }
+            }
+            if {[llength $members_batch] > 0} {
+                r sadd myset {*}$members_batch
+            }
 
-        # 3) Turn off the rehashing of this set, and remove the members to 500.
-        r bgsave
-        rem_hash_set_top_N myset [expr {[r scard myset] - 500}]
-        assert_equal [r scard myset] 500
+            # 2) Wait for the initial hash set rehashing to finish.
+            while {[is_rehashing myset]} {
+                r srandmember myset 100
+            }
 
-        # 4) Kill RDB child process to restart rehashing.
-        set pid1 [get_child_pid 0]
-        catch {exec kill -9 $pid1}
-        waitForBgsave r
+            # 3) Turn off the rehashing of this set, and remove members down to 500.
+            r bgsave
+            # Use correct and efficient logic to remove elements.
+            while {[r scard myset] > 500} {
+                # FIX: Replace invalid 'min' command with standard Tcl expr.
+                set count [expr {100 < ([r scard myset] - 500) ? 100 : ([r scard myset] - 500)}]
+                r spop myset $count
+            }
+            assert_equal [r scard myset] 500
+
+            # 4) Kill RDB child process to restart rehashing.
+            if {[catch {set pid1 [get_child_pid 0]} errmsg]} {
+                waitForBgsave r
+            } else {
+                catch {exec kill -9 $pid1}
+                waitForBgsave r
+            }
 
-        # 5) Let the set hash to start rehashing
-        r spop myset 1
-        assert [is_rehashing myset]
+            # 5) Let the set hash to start rehashing
+            r spop myset 1
+            assert [is_rehashing myset]
 
-        # 6) Verify that when rdb saving is in progress, rehashing will still be performed (because
-        # the ratio is extreme) by waiting for it to finish during an active bgsave.
-        r bgsave
+            # 6) Verify that when rdb saving is in progress, rehashing will still be performed (because
+            # the ratio is extreme) by waiting for it to finish during an active bgsave.
+            r bgsave
 
-        while {[is_rehashing myset]} {
-            r srandmember myset 1
-        }
-        if {$::verbose} {
-            puts [r debug HTSTATS-KEY myset full]
-        }
+            while {[is_rehashing myset]} {
+                r srandmember myset 1
+            }
+            if {$::verbose} {
+                puts [r debug HTSTATS-KEY myset full]
+            }
+            
+            if {[catch {set pid1 [get_child_pid 0]} errmsg]} {
+                waitForBgsave r
+            } else {
+                catch {exec kill -9 $pid1}
+                waitForBgsave r
+            }
 
-        set pid1 [get_child_pid 0]
-        catch {exec kill -9 $pid1}
-        waitForBgsave r
+            # 7) Check that eventually, SRANDMEMBER returns all elements.
+            array set allmyset {}
+            foreach ele [r smembers myset] {
+                set allmyset($ele) 1
+            }
+            unset -nocomplain auxset
+            set iterations 1000
+            while {$iterations != 0} {
+                incr iterations -1
+                set res [r srandmember myset -10]
+                foreach ele $res {
+                    set auxset($ele) 1
+                }
+                if {[lsort [array names allmyset]] eq
+                    [lsort [array names auxset]]} {
+                    break;
+                }
+            }
+            assert {$iterations != 0}
 
-        # 7) Check that eventually, SRANDMEMBER returns all elements.
-        array set allmyset {}
-        foreach ele [r smembers myset] {
-            set allmyset($ele) 1
-        }
-        unset -nocomplain auxset
-        set iterations 1000
-        while {$iterations != 0} {
-            incr iterations -1
-            set res [r srandmember myset -10]
-            foreach ele $res {
-                set auxset($ele) 1
+            # 8) Remove the members to 30 in order to calculate the value of Chi-Square Distribution.
+            while {[r scard myset] > 30} {
+                # FIX: Replace invalid 'min' command with standard Tcl expr.
+                set count [expr {100 < ([r scard myset] - 30) ? 100 : ([r scard myset] - 30)}]
+                r spop myset $count
             }
-            if {[lsort [array names allmyset]] eq
-                [lsort [array names auxset]]} {
-                break;
+            assert_equal [r scard myset] 30
+            
+            # Wait for shrink-rehash to complete before asserting it's done.
+            while {[is_rehashing myset]} {
+                r ping
             }
-        }
-        assert {$iterations != 0}
 
-        # 8) Remove the members to 30 in order to calculate the value of Chi-Square Distribution,
-        #    otherwise we would need more iterations.
-        rem_hash_set_top_N myset [expr {[r scard myset] - 30}]
-        assert_equal [r scard myset] 30
-        
-        # Hash set rehashing would be completed while removing members from the `myset`
-        # We also check the size and members in the hash table.
-        verify_rehashing_completed_key myset 64 30
-
-        # Now that we have a hash set with only one long chain bucket.
-        set htstats [r debug HTSTATS-KEY myset full]
-        assert {[regexp {different slots: ([0-9]+)} $htstats - different_slots]}
-        assert {[regexp {max chain length: ([0-9]+)} $htstats - max_chain_length]}
-        assert {$different_slots == 1 && $max_chain_length == 30}
-
-        # 9) Use positive count (PATH 4) to get 10 elements (out of 30) each time.
-        unset -nocomplain allkey
-        set iterations 1000
-        while {$iterations != 0} {
-            incr iterations -1
-            set res [r srandmember myset 10]
-            foreach ele $res {
-                lappend allkey $ele
+            # Hash set rehashing would be completed while removing members from the `myset`
+            # We also check the size and members in the hash table.
+            verify_rehashing_completed_key myset 64 30
+
+            # Now that we have a hash set with only one long chain bucket.
+            set htstats [r debug HTSTATS-KEY myset full]
+            assert {[regexp {different slots: ([0-9]+)} $htstats - different_slots]}
+            assert {[regexp {max chain length: ([0-9]+)} $htstats - max_chain_length]}
+            assert {$different_slots == 1 && $max_chain_length == 30}
+
+            # 9) Use positive count (PATH 4) to get 10 elements (out of 30) each time.
+            unset -nocomplain allkey
+            set iterations 1000
+            while {$iterations != 0} {
+                incr iterations -1
+                set res [r srandmember myset 10]
+                foreach ele $res {
+                    lappend allkey $ele
+                }
             }
+            # validate even distribution of random sampling (df = 29, 73 means 0.00001 probability)
+            assert_lessthan [chi_square_value $allkey] 73
+        } finally {
+            # This cleanup block is guaranteed to run, even if the test fails.
+            r config set save $origin_save
+            r config set set-max-listpack-entries $origin_max_lp
+            r config set rdb-key-save-delay $origin_save_delay
         }
-        # validate even distribution of random sampling (df = 29, 73 means 0.00001 probability)
-        assert_lessthan [chi_square_value $allkey] 73
-
-        r config set save $origin_save
-        r config set set-max-listpack-entries $origin_max_lp
-        r config set rdb-key-save-delay $origin_save_delay
     } {OK} {needs:debug slow}
 
     proc setup_move {} {
