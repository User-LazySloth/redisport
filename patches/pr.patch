diff --git i/Makefile w/Makefile
index 13a115b..ffdeb20 100644
--- i/Makefile
+++ w/Makefile
@@ -1,11 +1,11 @@
 # Top level makefile, the real stuff is at ./src/Makefile and in ./modules/Makefile
 
-SUBDIRS = src
+SUBDIRS = deps src
 ifeq ($(BUILD_WITH_MODULES), yes)
 	SUBDIRS += modules
 endif
 
-default: all
+default: all 
 
 .DEFAULT:
 	for dir in $(SUBDIRS); do $(MAKE) -C $$dir $@; done
diff --git i/deps/Makefile w/deps/Makefile
index 5593e0c..719f687 100644
--- i/deps/Makefile
+++ w/deps/Makefile
@@ -106,7 +106,7 @@ ARFLAGS=rc
 
 lua: .make-prerequisites
 	@printf '%b %b\n' $(MAKECOLOR)MAKE$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR)
-	cd lua/src && $(MAKE) all CFLAGS="$(LUA_CFLAGS)" MYLDFLAGS="$(LUA_LDFLAGS)" AR="$(AR) $(ARFLAGS)"
+	cd lua/src && $(MAKE) all CFLAGS="$(LUA_CFLAGS)" MYLDFLAGS="$(LUA_LDFLAGS)" MYLIBS="$(LIBS)" AR="$(AR) $(ARFLAGS)"
 
 .PHONY: lua
 
diff --git i/deps/fast_float/fast_float.h w/deps/fast_float/fast_float.h
index 81d9da5..6c57e7f 100644
--- i/deps/fast_float/fast_float.h
+++ w/deps/fast_float/fast_float.h
@@ -89,12 +89,15 @@
 #ifndef FASTFLOAT_FLOAT_COMMON_H
 #define FASTFLOAT_FLOAT_COMMON_H
 
+#define rindex rindex_zos
+#include <string.h>
 #include <cfloat>
 #include <cstdint>
 #include <cassert>
 #include <cstring>
 #include <type_traits>
 #include <system_error>
+#undef rindex
 #ifdef __has_include
 #if __has_include(<stdfloat>) && (__cplusplus > 202002L || _MSVC_LANG > 202002L)
 #include <stdfloat>
diff --git i/deps/lua/Makefile w/deps/lua/Makefile
index 209a132..33c9ec9 100644
--- i/deps/lua/Makefile
+++ w/deps/lua/Makefile
@@ -33,7 +33,7 @@ INSTALL_DATA= $(INSTALL) -m 0644
 
 # Utilities.
 MKDIR= mkdir -p
-RANLIB= ranlib
+RANLIB= echo 
 
 # == END OF USER SETTINGS. NO NEED TO CHANGE ANYTHING BELOW THIS LINE =========
 
diff --git i/deps/lua/src/Makefile w/deps/lua/src/Makefile
index f3bba2f..e7cece6 100644
--- i/deps/lua/src/Makefile
+++ w/deps/lua/src/Makefile
@@ -10,7 +10,7 @@ PLAT= none
 CC?= gcc
 CFLAGS= -O2 -Wall $(MYCFLAGS)
 AR= ar rcu
-RANLIB= ranlib
+RANLIB= echo
 RM= rm -f
 LIBS= -lm $(MYLIBS)
 
@@ -94,7 +94,7 @@ freebsd:
 	$(MAKE) all MYCFLAGS="-DLUA_USE_LINUX" MYLIBS="-Wl,-E -lreadline"
 
 generic:
-	$(MAKE) all MYCFLAGS=
+	$(MAKE) all MYCFLAGS="-DLUA_USE_POSIX -DLUA_USE_DLOPEN" MYLIBS="$(LIBS)"
 
 linux:
 	$(MAKE) all MYCFLAGS=-DLUA_USE_LINUX MYLIBS="-Wl,-E -ldl -lreadline -lhistory -lncurses"
diff --git i/src/Makefile w/src/Makefile
index 8b0e3d9..e792326 100644
--- i/src/Makefile
+++ w/src/Makefile
@@ -23,14 +23,6 @@ CLANG := $(findstring clang,$(shell sh -c '$(CC) --version | head -1'))
 # Optimization flags. To override, the OPTIMIZATION variable can be passed, but
 # some automatic defaults are added to it. To specify optimization flags
 # explicitly without any defaults added, pass the OPT variable instead.
-OPTIMIZATION?=-O3
-ifeq ($(OPTIMIZATION),-O3)
-	ifeq (clang,$(CLANG))
-		OPTIMIZATION+=-flto
-	else
-		OPTIMIZATION+=-flto=auto
-	endif
-endif
 ifneq ($(OPTIMIZATION),-O0)
 	OPTIMIZATION+=-fno-omit-frame-pointer
 endif
@@ -201,6 +193,10 @@ ifeq ($(uname_S),DragonFly)
 	# DragonFly
 	FINAL_LIBS+= -lpthread -lexecinfo
 else
+ifeq ($(uname_S),OS390)
+	# OpenBSD
+	FINAL_LIBS+=-llua 
+else
 ifeq ($(uname_S),OpenBSD)
 	# OpenBSD
 	FINAL_LIBS+= -lpthread -lexecinfo
@@ -216,8 +212,8 @@ ifeq ($(uname_S),Haiku)
 	FINAL_LIBS+= -lpthread
 else
 	# All the other OSes (notably Linux)
-	FINAL_LDFLAGS+= -rdynamic
-	FINAL_LIBS+=-ldl -pthread -lrt
+	FINAL_LDFLAGS+=
+	FINAL_LIBS+=$(LIBS)
 endif
 endif
 endif
@@ -535,3 +531,4 @@ install: all
 
 uninstall:
 	rm -f $(INSTALL_BIN)/{$(REDIS_SERVER_NAME),$(REDIS_BENCHMARK_NAME),$(REDIS_CLI_NAME),$(REDIS_CHECK_RDB_NAME),$(REDIS_CHECK_AOF_NAME),$(REDIS_SENTINEL_NAME)}
+endif
diff --git i/src/bio.c w/src/bio.c
index 0bddf8a..0c47424 100644
--- i/src/bio.c
+++ w/src/bio.c
@@ -397,8 +397,8 @@ void bioKillThreads(void) {
     unsigned long j;
 
     for (j = 0; j < BIO_WORKER_NUM; j++) {
-        if (bio_threads[j] == pthread_self()) continue;
-        if (bio_threads[j] && pthread_cancel(bio_threads[j]) == 0) {
+        if (bio_threads[j].__ == pthread_self().__) continue;
+        if (bio_threads[j].__ && pthread_cancel(bio_threads[j]) == 0) {
             if ((err = pthread_join(bio_threads[j],NULL)) != 0) {
                 serverLog(LL_WARNING,
                     "Bio worker thread #%lu can not be joined: %s",
diff --git i/src/config.h w/src/config.h
index ec0fb15..ed19603 100644
--- i/src/config.h
+++ w/src/config.h
@@ -223,7 +223,7 @@ void setproctitle(const char *fmt, ...);
     defined(apollo) || defined(__convex__) || defined(_CRAY) || \
     defined(__hppa) || defined(__hp9000) || \
     defined(__hp9000s300) || defined(__hp9000s700) || \
-    defined (BIT_ZERO_ON_LEFT) || defined(m68k) || defined(__sparc)
+    defined (BIT_ZERO_ON_LEFT) || defined(m68k) || defined(__sparc) || defined(__MVS__)
 #define BYTE_ORDER	BIG_ENDIAN
 #endif
 #endif /* linux */
diff --git i/src/debug.c w/src/debug.c
index 5584ae3..9e26c47 100644
--- i/src/debug.c
+++ w/src/debug.c
@@ -2274,7 +2274,7 @@ int memtest_test_linux_anonymous_maps(void) {
 
 static void killMainThread(void) {
     int err;
-    if (pthread_self() != server.main_thread_id && pthread_cancel(server.main_thread_id) == 0) {
+    if (pthread_self().__ != server.main_thread_id.__ && pthread_cancel(server.main_thread_id) == 0) {
         if ((err = pthread_join(server.main_thread_id,NULL)) != 0) {
             serverLog(LL_WARNING, "main thread can not be joined: %s", strerror(err));
         } else {
@@ -2310,6 +2310,8 @@ void doFastMemoryTest(void) {
 #endif /* HAVE_PROC_MAPS */
 }
 
+
+#if !defined(__MVS__)
 /* Scans the (assumed) x86 code starting at addr, for a max of `len`
  * bytes, searching for E8 (callq) opcodes, and dumping the symbols
  * and the call offset if they appear to be valid. */
@@ -2367,6 +2369,7 @@ void dumpCodeAroundEIP(void *eip) {
         }
     }
 }
+#endif
 
 void invalidFunctionWasCalled(void) {}
 
@@ -2393,7 +2396,11 @@ static void sigsegvHandler(int sig, siginfo_t *info, void *secret) {
         serverLog(LL_WARNING,
         "Accessing address: %p", (void*)info->si_addr);
     }
+#ifdef __MVS__
+    if (info->si_pid != -1) {
+#else
     if (info->si_code == SI_USER && info->si_pid != -1) {
+#endif
         serverLog(LL_WARNING, "Killed by PID: %ld, UID: %d", (long) info->si_pid, info->si_uid);
     }
 
@@ -2431,7 +2438,7 @@ static void sigsegvHandler(int sig, siginfo_t *info, void *secret) {
 
     if (print_full_crash_info) printCrashReport();
 
-#ifdef HAVE_BACKTRACE
+#if defined(HAVE_BACKTRACE) && !defined(__MVS__)
     if (eip != NULL)
         dumpCodeAroundEIP(eip);
 #endif
diff --git i/src/iothread.c w/src/iothread.c
index e3da683..3c1bcaf 100644
--- i/src/iothread.c
+++ w/src/iothread.c
@@ -616,15 +616,15 @@ void killIOThreads(void) {
 
     int err, j;
     for (j = 1; j < server.io_threads_num; j++) {
-        if (IOThreads[j].tid == pthread_self()) continue;
-        if (IOThreads[j].tid && pthread_cancel(IOThreads[j].tid) == 0) {
+        if (IOThreads[j].tid.__ == pthread_self().__) continue;
+        if (IOThreads[j].tid.__ && pthread_cancel(IOThreads[j].tid) == 0) {
             if ((err = pthread_join(IOThreads[j].tid,NULL)) != 0) {
                 serverLog(LL_WARNING,
                     "IO thread(tid:%lu) can not be joined: %s",
-                        (unsigned long)IOThreads[j].tid, strerror(err));
+                        (unsigned long)IOThreads[j].tid.__, strerror(err));
             } else {
                 serverLog(LL_WARNING,
-                    "IO thread(tid:%lu) terminated",(unsigned long)IOThreads[j].tid);
+                    "IO thread(tid:%lu) terminated",(unsigned long)IOThreads[j].tid.__);
             }
         }
     }
diff --git i/src/server.c w/src/server.c
index e799118..32ed2f7 100644
--- i/src/server.c
+++ w/src/server.c
@@ -2671,8 +2671,8 @@ void resetServerStats(void) {
  * can work reliably (default cancelability type is PTHREAD_CANCEL_DEFERRED).
  * Needed for pthread_cancel used by the fast memory test used by the crash report. */
 void makeThreadKillable(void) {
-    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
-    pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
+    //pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
+    //pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
 }
 
 void initServer(void) {
diff --git i/src/util.c w/src/util.c
index ba3d9d0..34d5358 100644
--- i/src/util.c
+++ w/src/util.c
@@ -1085,7 +1085,7 @@ sds getAbsolutePath(char *filename) {
  * i.e timezone variables are linux specific.
  */
 long getTimeZone(void) {
-#if defined(__linux__) || defined(__sun)
+#if defined(__linux__) || defined(__sun) || defined(__MVS__)
     return timezone;
 #else
     struct timezone tz;
