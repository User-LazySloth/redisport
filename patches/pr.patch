diff --git a/deps/lua/Makefile b/deps/lua/Makefile
index 209a13244..33c9ec9a8 100644
--- a/deps/lua/Makefile
+++ b/deps/lua/Makefile
@@ -33,7 +33,7 @@ INSTALL_DATA= $(INSTALL) -m 0644
 
 # Utilities.
 MKDIR= mkdir -p
-RANLIB= ranlib
+RANLIB= echo 
 
 # == END OF USER SETTINGS. NO NEED TO CHANGE ANYTHING BELOW THIS LINE =========
 
diff --git a/src/Makefile b/src/Makefile
index 0eb2cf41b..c14452490 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -23,14 +23,6 @@ CLANG := $(findstring clang,$(shell sh -c '$(CC) --version | head -1'))
 # Optimization flags. To override, the OPTIMIZATION variable can be passed, but
 # some automatic defaults are added to it. To specify optimization flags
 # explicitly without any defaults added, pass the OPT variable instead.
-OPTIMIZATION?=-O3
-ifeq ($(OPTIMIZATION),-O3)
-	ifeq (clang,$(CLANG))
-		OPTIMIZATION+=-flto
-	else
-		OPTIMIZATION+=-flto=auto
-	endif
-endif
 ifneq ($(OPTIMIZATION),-O0)
 	OPTIMIZATION+=-fno-omit-frame-pointer
 endif
diff --git a/src/bio.c b/src/bio.c
index 0bddf8a6b..0c47424a5 100644
--- a/src/bio.c
+++ b/src/bio.c
@@ -397,8 +397,8 @@ void bioKillThreads(void) {
     unsigned long j;
 
     for (j = 0; j < BIO_WORKER_NUM; j++) {
-        if (bio_threads[j] == pthread_self()) continue;
-        if (bio_threads[j] && pthread_cancel(bio_threads[j]) == 0) {
+        if (bio_threads[j].__ == pthread_self().__) continue;
+        if (bio_threads[j].__ && pthread_cancel(bio_threads[j]) == 0) {
             if ((err = pthread_join(bio_threads[j],NULL)) != 0) {
                 serverLog(LL_WARNING,
                     "Bio worker thread #%lu can not be joined: %s",
diff --git a/src/config.h b/src/config.h
index ec0fb1529..ed19603c4 100644
--- a/src/config.h
+++ b/src/config.h
@@ -223,7 +223,7 @@ void setproctitle(const char *fmt, ...);
     defined(apollo) || defined(__convex__) || defined(_CRAY) || \
     defined(__hppa) || defined(__hp9000) || \
     defined(__hp9000s300) || defined(__hp9000s700) || \
-    defined (BIT_ZERO_ON_LEFT) || defined(m68k) || defined(__sparc)
+    defined (BIT_ZERO_ON_LEFT) || defined(m68k) || defined(__sparc) || defined(__MVS__)
 #define BYTE_ORDER	BIG_ENDIAN
 #endif
 #endif /* linux */
diff --git a/src/debug.c b/src/debug.c
index 5584ae387..9e26c471a 100644
--- a/src/debug.c
+++ b/src/debug.c
@@ -2274,7 +2274,7 @@ int memtest_test_linux_anonymous_maps(void) {
 
 static void killMainThread(void) {
     int err;
-    if (pthread_self() != server.main_thread_id && pthread_cancel(server.main_thread_id) == 0) {
+    if (pthread_self().__ != server.main_thread_id.__ && pthread_cancel(server.main_thread_id) == 0) {
         if ((err = pthread_join(server.main_thread_id,NULL)) != 0) {
             serverLog(LL_WARNING, "main thread can not be joined: %s", strerror(err));
         } else {
@@ -2310,6 +2310,8 @@ void doFastMemoryTest(void) {
 #endif /* HAVE_PROC_MAPS */
 }
 
+
+#if !defined(__MVS__)
 /* Scans the (assumed) x86 code starting at addr, for a max of `len`
  * bytes, searching for E8 (callq) opcodes, and dumping the symbols
  * and the call offset if they appear to be valid. */
@@ -2367,6 +2369,7 @@ void dumpCodeAroundEIP(void *eip) {
         }
     }
 }
+#endif
 
 void invalidFunctionWasCalled(void) {}
 
@@ -2393,7 +2396,11 @@ static void sigsegvHandler(int sig, siginfo_t *info, void *secret) {
         serverLog(LL_WARNING,
         "Accessing address: %p", (void*)info->si_addr);
     }
+#ifdef __MVS__
+    if (info->si_pid != -1) {
+#else
     if (info->si_code == SI_USER && info->si_pid != -1) {
+#endif
         serverLog(LL_WARNING, "Killed by PID: %ld, UID: %d", (long) info->si_pid, info->si_uid);
     }
 
@@ -2431,7 +2438,7 @@ static void sigsegvHandler(int sig, siginfo_t *info, void *secret) {
 
     if (print_full_crash_info) printCrashReport();
 
-#ifdef HAVE_BACKTRACE
+#if defined(HAVE_BACKTRACE) && !defined(__MVS__)
     if (eip != NULL)
         dumpCodeAroundEIP(eip);
 #endif
diff --git a/src/iothread.c b/src/iothread.c
index e3da683d5..3c1bcafc9 100644
--- a/src/iothread.c
+++ b/src/iothread.c
@@ -616,15 +616,15 @@ void killIOThreads(void) {
 
     int err, j;
     for (j = 1; j < server.io_threads_num; j++) {
-        if (IOThreads[j].tid == pthread_self()) continue;
-        if (IOThreads[j].tid && pthread_cancel(IOThreads[j].tid) == 0) {
+        if (IOThreads[j].tid.__ == pthread_self().__) continue;
+        if (IOThreads[j].tid.__ && pthread_cancel(IOThreads[j].tid) == 0) {
             if ((err = pthread_join(IOThreads[j].tid,NULL)) != 0) {
                 serverLog(LL_WARNING,
                     "IO thread(tid:%lu) can not be joined: %s",
-                        (unsigned long)IOThreads[j].tid, strerror(err));
+                        (unsigned long)IOThreads[j].tid.__, strerror(err));
             } else {
                 serverLog(LL_WARNING,
-                    "IO thread(tid:%lu) terminated",(unsigned long)IOThreads[j].tid);
+                    "IO thread(tid:%lu) terminated",(unsigned long)IOThreads[j].tid.__);
             }
         }
     }
